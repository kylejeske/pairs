/* ----------------------------------------------------------------------	Copyright 2002-2010 MarkLogic Corporation.  All Rights Reserved.---------------------------------------------------------------------- */package com.marklogic.controls {		import flash.display.Sprite;	import com.marklogic.ui.BaseLexBtn;	import com.marklogic.interfaces.IListItem;	import flash.text.TextFormat;	import flash.events.MouseEvent;	import com.marklogic.events.CoocListEvent;	import com.caurina.transitions.Tweener;	import flash.geom.Point;	import com.marklogic.core.Preferences;		public class CoocListItem extends Sprite implements IListItem {				// Constants:		protected const PADDING:Number = 3;		protected const MAX_ITEMS:Number = 15;		// Public Properties:		public var _lex1:BaseLexBtn;		public var _lex2:BaseLexBtn;		public var _count:BaseLexBtn;		public var _divider:Sprite;		public var _bg:Sprite;		// Private Properties:		protected var _data:Object;		protected var _state:String = 'up';		protected var _tf:TextFormat;		protected var _xmlData:XML;		protected var _origPos:Point;		protected var _index:Number;		// UI Elements:								// Initialization:		public function CoocListItem() { configUI(); }				// Public Methods:				public function fromXML(value:XML):void {			_data = {};			_xmlData = value;			for each(var n:* in value.attributes()){ _data[n.name().toString()] = n.toString(); }			invalidateDisplay();		}				public function set index(value:Number):void {			_index = value;		}				public function get index():Number{ return _index; }				public function set data(value:Object):void { _data = value; }				public function get data():Object { return _data; }		public function set state(value:String):void { _state = value; }				public function set size(value:int):void {			_tf.size = value;			invalidateDisplay();		}				public function origPosition(p_x:Number,p_y:Number):void {			_origPos = new Point(p_x,p_y);		}				public function getPos(p_value:String):Number {			return (p_value == 'x') ? _origPos.x : _origPos.y;		}				public function show(p_delay:Number):void {			scaleX = scaleY = 0;			alpha = 0;			Tweener.addTween(this,{alpha:1, scaleX: 1, scaleY:1,time:1,transition:'easeOut', delay:p_delay});		}				public function hide():void {			Tweener.addTween(this,{alpha:0,time:0,transition:'easeOut'});		}				public function recalculateWidth():void {			var p:Point;			try {				p = new Point(_lex1.x,_lex1.y);				p = parent.localToGlobal(p);				if (p.x+_lex1.width > stage.stageWidth) {					//_lex1.width = _lex1.width - (p.x+_lex1.width - stage.stageWidth + _count.width + 20)					_lex1.width -= (p.x+_lex1.width - stage.stageWidth + _count.width + 20);					_count.x = _lex1.x + _lex1.width + PADDING;					_lex1.toolTip = true;				}				//				p = new Point(_lex2.x,_lex2.y);				p = parent.localToGlobal(p);				if (p.x+_lex2.width > stage.stageWidth) {					//_lex2.width = _lex2.width - (p.x+_lex2.width - stage.stageWidth + _count.width + 20)					_lex2.width -= (p.x+_lex2.width - stage.stageWidth + _count.width + 20);					_count.x = _lex2.x + _lex2.width + PADDING;					_lex2.toolTip = true;				}			}catch(e:*){}		}				// Protected Methods:		// Private Methods:		protected function invalidateDisplay():void {			_lex2.enabled = true;						if (_data.lex1 && _data.lex2) {				_lex1.label = _data.lex1;				_lex1.textFormat = _tf;				_bg.height = _divider.height = _lex1.height - 5;								_count.label = _data.value;				//_count.textFormat = _tf;								_lex2.label = _data.lex2;				_lex2.textFormat = _tf;								_divider.x = _lex1.x + _lex1.width + PADDING;				_lex2.x = _divider.x + _divider.width + PADDING;				_count.x = _lex2.x + _lex2.width + PADDING;			} else if (!_data.lex1 && _data.lex2) {				_lex1.label = _data.lex2;				_lex1.textFormat = _tf;								_count.label = _data.value;				//_count.textFormat = _tf;								_lex2.label = '';				_lex2.enabled = false;				_divider.visible = false;				_count.x = _lex1.x + _lex1.width + PADDING;			} else if (!_data.lex2 && _data.lex1) {				_lex1.label = _data.lex1;				_lex1.textFormat = _tf;								_count.label = _data.value;				//_count.textFormat = _tf;								_lex2.label = '';				_lex2.enabled = false;				_divider.visible = false;				_count.x = _lex1.x + _lex1.width + PADDING;				}		}				protected function onLexBtnClick(p_event:MouseEvent):void {			var btn:BaseLexBtn = p_event.target as BaseLexBtn;			var __name:String = (_xmlData.hasOwnProperty('@lex1')) ? btn.name : '_lex2';			var _ctrl:Boolean = (Preferences.filtering) ? (p_event.ctrlKey || p_event.altKey) : false; 			dispatchEvent(new CoocListEvent(CoocListEvent.ITEM_CLICK,{name:btn.label,item:this,type:__name},true,_ctrl))		}				protected function configUI():void {			_tf = new TextFormat();			_tf.color = Preferences.primaryColor; //0x700023;			_tf.font = Preferences.fontName;			var _tf2 = new TextFormat();			_tf2.color = Preferences.secondaryColor; //0xA00132;			var _tf3 = new TextFormat();			_tf3.color = Preferences.primaryColor; //0x700023;			_tf3.font = Preferences.fontName;			_tf3.size = 12;			_lex1.overFormat = _tf2;			_lex2.overFormat = _tf2;			_count.textFormat = _tf3;			_count.enabled = false;			_lex1.addEventListener(MouseEvent.CLICK,onLexBtnClick,false,0,true);			_lex2.addEventListener(MouseEvent.CLICK,onLexBtnClick,false,0,true);		}	}	}