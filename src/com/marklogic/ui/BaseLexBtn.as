/* ----------------------------------------------------------------------	Copyright 2002-2010 MarkLogic Corporation.  All Rights Reserved.---------------------------------------------------------------------- */package com.marklogic.ui {		import flash.display.Sprite;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.events.MouseEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;	import com.chewtinfoil.utils.StringUtils;	import com.marklogic.controls.Tooltip;		public class BaseLexBtn extends Sprite {				// Constants:		// Public Properties:		// Private Properties:		// UI Elements:		public var _field:TextField;		protected var _tf:TextFormat;		protected var _tfo:TextFormat; // over state;		protected var _gapFixer:Sprite;		protected var _timer:Timer;		protected var _tick:Number = 0;		protected var _state:String = '';		protected var _scrollIndex:Number = 0;		protected var _scrollEnabled:Boolean = false;		protected var _skin:MovieClip;		protected var _sizing:String = 'dynamic';		protected var _toolTip:Boolean = false;		protected var _realLabel:String;						// Initialization:		public function BaseLexBtn() {			configUI();		}		// Public Methods:				public function set label(value:String):void {			_realLabel = value;			_field.text = _realLabel;			textFormat = _tf;			if (_sizing == 'dynamic') {				_field.width = _field.textWidth + 6;				_field.height = _field.textHeight + 6;			}						_gapFixer.graphics.clear();			_gapFixer.graphics.beginFill(0xFF0000,0);			_gapFixer.graphics.drawRoundRect(0,0,_field.width,_field.height,0,0);			_scrollEnabled = false;		}				public function set sizing(value:String):void {			_sizing = value;		}				public function get label():String {			return _realLabel;		}				public function truncate(value:Number=30){						_field.text = StringUtils.truncate(_realLabel,value,'...');				textFormat = _tf;			_field.width = _field.textWidth + 5;			_gapFixer.graphics.clear();			_gapFixer.graphics.beginFill(0xFF0000,0);			_gapFixer.graphics.drawRoundRect(0,0,_field.width,_field.height,0,0);		}				public function set textFormat(value:TextFormat):void {			_tf = value;			_field.setTextFormat(_tf);		}				public function set skin(value:MovieClip):void {			var index:Number = getChildIndex(_skin);			removeChild(_skin);			_skin = value;			addChildAt(_skin,index);		}				public function set overFormat(value:TextFormat):void {			_tfo = value;			_field.setTextFormat(_tfo);		}				public function set enabled(value:Boolean):void {			mouseEnabled = value;		}				public function set toolTip(value:Boolean):void {			_toolTip = value;		}				/*public function startScroll():void {			_scrollEnabled = true;			_timer.start();		}*/				override public function set width(value:Number):void {			// used to determine textWidth for individual font size;			var _testField:TextField = new TextField();			_testField.text = 'P';			_testField.setTextFormat(_tf);			_testField.width = _testField.textWidth;			var __width:Number = _testField.width;			if (name == "_label") {				_field.autoSize = "left";				_field.multiline = true;				_field.wordWrap = true;				_field.width = 230;			} else {				_field.text = StringUtils.truncate(_realLabel,uint(value/Number(__width)),'...');			}			textFormat = _tf;			if (name != "_label") {				_field.width = value;			}			_gapFixer.graphics.clear();			_gapFixer.graphics.beginFill(0xFF0000,0);			_gapFixer.graphics.drawRoundRect(0,0,_field.width,_field.height,0,0);		}				public function get textWidth():Number {			return _field.textWidth + 10;		}				// Protected Methods:				protected function onTick(p_event:TimerEvent):void {			if(_field.scrollH == _field.maxScrollH && _tick < 40){ _tick++; }			else if(_field.scrollH == 0 && _tick > 0){ _tick--; }			else if( _field.scrollH != _field.maxScrollH && _tick == 0){  _field.scrollH += 2;  }			else if (_field.scrollH > 0 && _tick == 40){ _field.scrollH -= 2; }			if(_tick == 40 || _tick == 0) {				_timer.stop();				_timer.reset();					if(_tick == 0 && _field.scrollH == 0) { 								_scrollIndex++;					if(_scrollIndex == 1 && _state != 'over'){						_scrollIndex = 0;						return;					}					}												_timer.start();				}		}				protected function onMouseOver(p_event:MouseEvent):void {			try {				if(_toolTip){					Tooltip.show(_realLabel, {width:500, stage:stage, target:_field, x:x+width>>1, y:y+height>>1, track:true});								/*startScroll(); */				}				_field.setTextFormat(_tfo);				_state = 'over';							}catch(e:*){}		}				protected function onMouseOut(p_event:MouseEvent):void {			try {				_field.setTextFormat(_tf);				_state = 'up';				Tooltip.hide();				/*_timer.stop();				_timer.reset();				_field.scrollH = 0;*/			}catch(e:*){}		}		// Private Methods:		protected function configUI():void {			_tf = new TextFormat();			_skin = new MovieClip();			addChildAt(_skin,0);			textFormat = _tf;			mouseChildren = false;			buttonMode = true;			_gapFixer = new Sprite();			addChild(_gapFixer);			addEventListener(MouseEvent.MOUSE_OVER,onMouseOver,false,0,true);			addEventListener(MouseEvent.MOUSE_OUT,onMouseOut,false,0,true);			_timer =  new Timer(25,1000);			_timer.addEventListener(TimerEvent.TIMER,onTick,false,0,true);		}	}	}