/* ----------------------------------------------------------------------	Copyright 2002-2010 MarkLogic Corporation.  All Rights Reserved.---------------------------------------------------------------------- */package com.marklogic.views {		import flash.display.Sprite;	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.ui.Keyboard;	import flash.geom.Point;	import com.marklogic.interfaces.IListManager;	import com.marklogic.interfaces.IList;	import com.marklogic.interfaces.IListItem;	import com.marklogic.controls.CoocListItem;	import com.caurina.transitions.Tweener;	import com.marklogic.views.FilterManager;	import com.marklogic.controls.FilterBox;	import com.marklogic.core.Preferences;		public class CoocListManager extends Sprite implements IListManager {				// Constants:		// Public Properties:		// Private Properties:		protected var _historyIndex:int;		protected var _dataProvider:XMLList;		protected var _numItems:int;		protected var _listItemHolder:Sprite;		protected var _history:Array = [];		protected var _currentIndex:int = -1;		protected var _direction:String = '';		protected var _listOne:IList;		protected var _listTwo:IList;		protected var _selectedList:IList;		protected var _prevList:IList;		protected var _mode:String;		protected var _filterHolder:FilterManager;		protected var _ctrlDown:Boolean = false;		protected var _firstRun:Boolean = true;				// Initialization:		public function CoocListManager() { configUI(); }			// Public Methods:				public function addDataSet(value:XML, p_mode:String,p_item:Sprite, p_filterBox:FilterBox):void {			_history.push({xml:value, mode:p_mode,item:p_item,filter:p_filterBox});			gotoDataSet(_history.length-1);		}				public function gotoDataSet(value:int):void {			_direction = (_currentIndex == -1) ? '' : (_currentIndex > value) ? 'backward' : 'forward';			_selectedList = (_selectedList == _listOne) ? _listTwo : _listOne;			_prevList = (_selectedList == _listOne) ? _listTwo : _listOne;			_currentIndex = value;			if(_direction == 'backward') { _history.splice(value+1, _history.length - value); }			draw();		}				public function get currentIndex():Number { return _currentIndex; }				public function clear():void {			_history = [];			_currentIndex = 0;			_listOne.x = _listTwo.x = 0;			_selectedList = null;			_listOne.removeItems();			_listTwo.removeItems();			_listOne.alpha = _listTwo.alpha = 1;		}				public function draw():void {			var obj:Object = _history[_currentIndex];			_selectedList.alpha = 1;			if (obj.prevY == null) {  obj.prevY = _prevList.y; }			var selectedItemY:Number = (obj.item) ? obj.item.y : 0;			var selectedItemHeight:Number = (obj.item) ? obj.item.height : 0;			var dataSet:XMLList = obj.xml..data;			_selectedList.label = (obj.xml.group.hasOwnProperty('@lex1')) ? obj.xml.group.@lex1 : obj.xml.group.@lex2;			_selectedList.mode = obj.mode;			_selectedList.dataProvider = dataSet;			_selectedList.index = _currentIndex;			if (obj.filter) {				obj.filter.index = _currentIndex;				_selectedList.addFilter(obj.filter);			}			_selectedList.y = 0; // reset the list to ori y pos;			var dist:Number = (!obj.item) ? 0 : ((_selectedList.height/2) - ((selectedItemY + selectedItemHeight/2) + obj.prevY));			_selectedList.y -= dist;			_selectedList.x = (_direction == '') ? 0 : (_direction == 'forward') ? (_prevList.x + _prevList.width) : (_prevList.x - _prevList.width);						// 			_selectedList.showItems();			var pX:Number = (_direction == 'forward') ? _selectedList.x * -1 : (_direction != '') ? (_prevList.x-_selectedList.x) + _listItemHolder.x : _selectedList.x;			var pY:Number = (_direction == 'forward') ? _selectedList.y * -1 : (_direction != '') ? (_prevList.y-_selectedList.y) + _listItemHolder.y : _selectedList.y;			Tweener.addTween(_listItemHolder,{x:pX,y:pY,time:1,transition:'easeOut',onComplete:prevMoved});			if (_direction == 'backward') { Tweener.addTween(_prevList,{alpha:0,time:.4,transition:'easeOut'}); }			_listItemHolder.mouseChildren = false;		}				public function getFilterData(p_index:Number):Object {			var oldIndex:Number = _currentIndex;			var currentPos:Number = p_index;			var lex1:Array = [];			var lex2:Array = [];			var arr:Array;			for (var i:Number=oldIndex;i>currentPos;i--) {				var filter:FilterBox = _history[i].filter;				if (filter) {					var filterData:Object = filter.data;					arr = (filterData.type == 'lex1') ? lex1 : lex2;					arr.push(filterData.name);				}			}			return {lex1:lex1,lex2:lex2};		}				public function invalidate():void {}				protected function prevMoved():void {			if (_direction == 'backward') { _prevList.removeItems(); _prevList.alpha = 1; }			 _listItemHolder.mouseChildren = true; 			 _selectedList.recalculateWidth();		}		  		protected function onKeyPress(p_event:KeyboardEvent):void {			if (_ctrlDown) { return; }			var l:Number = _history.length;			var _filters:Array = [];			switch (p_event.keyCode) { // cmd || ctrl				case Keyboard.CONTROL:					_ctrlDown = true;					if (_history.length <= 1) { return; } // Prevent the single filter from animating					for (var i:int=0;i<l;i++) {						var filter:FilterBox = _history[i].filter;						if (filter){ _filters.push(filter); }					}					_selectedList.clearFilter();					_selectedList.addFilter(_filters);					break;			}			if (_firstRun) {				switch (p_event.keyCode) { // cmd || ctrl					case Keyboard.CONTROL:						_ctrlDown = true;						_selectedList.clearFilter();						_selectedList.addFilter(_filters);						_firstRun = false;						break;				}			}		}				protected function onKeyRelease(p_event:KeyboardEvent):void { 			switch (p_event.keyCode) {				case Keyboard.CONTROL: // cmd || ctrl					_ctrlDown = false;					if (_history.length <= 1) { return; } // Prevent the single filter from animating					_selectedList.clearFilter();					var obj:Object = _history[_currentIndex];					if (obj.filter) {						obj.filter.index = _currentIndex;						_selectedList.addFilter(obj.filter)					}					break;			}		}				// Protected Methods:				protected function onAddedToStage(p_event:Event):void {						if (Preferences.filtering) {				stage.addEventListener(KeyboardEvent.KEY_DOWN,onKeyPress,false,0,true);				stage.addEventListener(KeyboardEvent.KEY_UP,onKeyRelease,false,0,true);			}		}				protected function configUI():void {			_listOne = new CoocList();			_listTwo = new CoocList();			_listItemHolder = new Sprite();			addChild(_listItemHolder);			_listItemHolder.addChild(_listOne as Sprite);			_listItemHolder.addChild(_listTwo as Sprite);			addEventListener(Event.ADDED_TO_STAGE,onAddedToStage,false,0,true);		}			}	}